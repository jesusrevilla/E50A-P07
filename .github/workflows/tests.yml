name: Pruebas unitarias y funcionales

on:
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: escuela
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
        - 5432:5432

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4       
        
      - name: Install dependencies
        run: |
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget -qO - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update
          sudo apt-get install -y postgresql-client-17 build-essential libpq-dev git        

      - name: Wait for PostgreSQL to be ready
        run: until pg_isready -h localhost -p 5432; do sleep 1; done      

      - name: Load database schema
        run: |
          psql -h localhost -U postgres -d escuela -f schema.sql  2>&1 | tee schema_log.txt 
        env:
          PGPASSWORD: postgres

      - name: Test tables creation
        run: |
          if [ $(grep -c "CREATE TABLE" schema_log.txt) -lt 3 ]; then
            echo "Menos de 3 tablas creadas"
            exit 1
          else
            echo "Tres o más tablas creadas"
          fi          

      - name: Insert data
        run: |
          psql -h localhost -U postgres -d escuela -f insert_data.sql  2>&1 | tee insert_data_log.txt 
        env:
          PGPASSWORD: postgres

      - name: Test insertions
        run: |
          if [ $(grep -c "INSERT" insert_data_log.txt) -lt 5 ]; then
            echo "Menos de 5 inserciones"
            exit 1
          else
            echo "Almenos 5 registros insertados"
          fi     

      - name: Query data
        run: |
          psql -h localhost -U postgres -d escuela -f query_data.sql  2>&1 | tee query_data_log.txt 
        env:
          PGPASSWORD: postgres

      - name: Test queries (select missing attendance)
        run: |
          if [ $(grep -c "row" query_data_log.txt) -lt 2 ]; then
            echo "Menos de 2 consultas"
            exit 1
          else
            echo "Almenos 2 consultas"
          fi               

      - name: Purge old data (more than 6 months)
        run: |
          psql -h localhost -U postgres -d escuela -f purge.sql  2>&1 | tee purge_log.txt 
        env:
          PGPASSWORD: postgres
          
      - name: Test purge
        run: |
          if [ $(grep -c "DELETE" purge_log.txt) -lt 1 ]; then
            echo "Falta ejecutar purga"
            exit 1
          else
            echo "Purga executada"
          fi    
                
      - name: Backup database
        run: |
          pg_dump -h localhost -U postgres -d escuela > escuela_backup.sql
        env:
          PGPASSWORD: postgres

      - name: Drop data
        run: |
          psql -h localhost -U postgres -d escuela -f drop_data.sql  2>&1 | tee drop_data_log.txt 
        env:
          PGPASSWORD: postgres          

      - name: Test missing data (droped data)
        run: |
          if [ $(grep -c "DROP TABLE" drop_data_log.txt) -lt 1 ]; then
            echo "Falta borrar alguna tabla"
            exit 1
          else
            echo "Se ha borrado algún registro"
          fi            

      - name: Restore database
        run: |
          psql -h localhost -U postgres -d escuela < escuela_backup.sql  2>&1 | tee restore_log.txt 
          cat restore_log.txt
        env:
          PGPASSWORD: postgres                    

      - name: Test restore
        run: |
          if [ $(grep -c "INSERT" drop_data_log.txt) -lt 0 ]; then
            echo "Menos de 5 inserciones de 5 registros"
            exit 1
          else
            echo "TODO"
          fi                      
